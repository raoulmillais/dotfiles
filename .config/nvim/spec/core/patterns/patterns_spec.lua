local patterns = require('core.patterns')

describe("core.patterns", function()

  describe("number pattern", function()
    it("should match single digits", function()
      assert.equals(2, patterns.number:match("5"))
      assert.equals(2, patterns.number:match("0"))
      assert.equals(2, patterns.number:match("9"))
    end)

    it("should match multiple digits", function()
      assert.equals(4, patterns.number:match("123"))
      assert.equals(7, patterns.number:match("999999"))
      assert.equals(4, patterns.number:match("007"))
    end)

    it("should not match empty string", function()
      assert.is_nil(patterns.number:match(""))
    end)

    it("should not match non-digits", function()
      assert.is_nil(patterns.number:match("abc"))
      assert.is_nil(patterns.number:match("-123"))
    end)

    it("should match only the digit portion", function()
      assert.equals(4, patterns.number:match("123abc"))
    end)
  end)

  describe("whitespace pattern", function()
    it("should match zero spaces", function()
      assert.equals(1, patterns.whitespace:match(""))
      assert.equals(1, patterns.whitespace:match("abc"))
    end)

    it("should match one space", function()
      assert.equals(2, patterns.whitespace:match(" "))
      assert.equals(2, patterns.whitespace:match(" abc"))
    end)

    it("should match multiple spaces", function()
      assert.equals(4, patterns.whitespace:match("   "))
      assert.equals(6, patterns.whitespace:match("     text"))
    end)

    it("should not match tabs or other whitespace", function()
      assert.equals(1, patterns.whitespace:match("\t"))  -- matches 0 spaces, stops at tab
      assert.equals(1, patterns.whitespace:match("\n"))  -- matches 0 spaces, stops at newline
    end)
  end)

  describe("eof pattern", function()
    it("should match end of string", function()
      assert.equals(1, patterns.eof:match(""))
    end)

    it("should not match when not at end", function()
      assert.is_nil(patterns.eof:match("abc"))
    end)
  end)

  describe("eol pattern", function()
    it("should match Unix line ending", function()
      assert.equals(2, patterns.eol:match("\n"))
      assert.equals(2, patterns.eol:match("\nmore text"))
    end)

    it("should match Windows line ending", function()
      assert.equals(3, patterns.eol:match("\r\n"))
      assert.equals(3, patterns.eol:match("\r\nmore text"))
    end)

    it("should match Mac line ending", function()
      assert.equals(2, patterns.eol:match("\r"))
      assert.equals(2, patterns.eol:match("\rmore text"))
    end)

    it("should not match other characters", function()
      assert.is_nil(patterns.eol:match("abc"))
      assert.is_nil(patterns.eol:match(" "))
    end)
  end)

  describe("unix path character pattern", function()
    it("should match alphanumeric characters", function()
      assert.equals(2, patterns.unix_path_char:match("a"))
      assert.equals(2, patterns.unix_path_char:match("Z"))
      assert.equals(2, patterns.unix_path_char:match("5"))
    end)

    it("should match special filename characters", function()
      assert.equals(2, patterns.unix_path_char:match("."))
      assert.equals(2, patterns.unix_path_char:match("-"))
      assert.equals(2, patterns.unix_path_char:match("_"))
      assert.equals(2, patterns.unix_path_char:match(" "))
      assert.equals(2, patterns.unix_path_char:match("("))
      assert.equals(2, patterns.unix_path_char:match(")"))
      assert.equals(2, patterns.unix_path_char:match("!"))
      assert.equals(2, patterns.unix_path_char:match("@"))
    end)

    it("should not match path separator", function()
      assert.is_nil(patterns.unix_path_char:match("/"))
    end)

    it("should not match invalid characters", function()
      assert.is_nil(patterns.unix_path_char:match("\\"))
      assert.is_nil(patterns.unix_path_char:match("\n"))
      assert.is_nil(patterns.unix_path_char:match("\0"))
    end)
  end)

  describe("path segment patterns", function()
    describe("seg", function()
      it("should match regular filenames", function()
        assert.equals(5, patterns.seg:match("file"))
        assert.equals(9, patterns.seg:match("file.txt"))
        assert.equals(8, patterns.seg:match(".bashrc"))
        assert.equals(11, patterns.seg:match("my-file_01"))
      end)

      it("should match just dot", function()
        assert.equals(2, patterns.seg:match("."))
      end)

      it("should match just dotdot", function()
        assert.equals(3, patterns.seg:match(".."))
      end)

      it("should match filenames starting with multiple dots", function()
        assert.equals(13, patterns.seg:match("...gitignore"))
      end)
    end)

    describe("seg", function()
      it("should match any valid segment", function()
        assert.equals(2, patterns.seg:match("."))
        assert.equals(3, patterns.seg:match(".."))
        assert.equals(5, patterns.seg:match("file"))
        assert.equals(9, patterns.seg:match("file.txt"))
      end)
    end)
  end)

  describe("path separator", function()
    it("should match forward slash", function()
      assert.equals(2, patterns.sep:match("/"))
      assert.equals(2, patterns.sep:match("/home"))
    end)

    it("should not match backslash", function()
      assert.is_nil(patterns.sep:match("\\"))
    end)
  end)

  describe("sequence of segments", function()
    it("should match single segment", function()
      assert.equals(5, patterns.seq_of_segs:match("home"))
      assert.equals(2, patterns.seq_of_segs:match("."))
      assert.equals(3, patterns.seq_of_segs:match(".."))
    end)

    it("should match multiple segments", function()
      assert.equals(10, patterns.seq_of_segs:match("home/user"))
      assert.equals(20, patterns.seq_of_segs:match("home/user/documents"))
    end)

    it("should match with trailing slash", function()
      assert.equals(6, patterns.seq_of_segs:match("home/"))
      assert.equals(11, patterns.seq_of_segs:match("home/user/"))
    end)

    it("should handle special segments", function()
      assert.equals(11, patterns.seq_of_segs:match("../parent"))
      assert.equals(13, patterns.seq_of_segs:match("./current"))
      assert.equals(16, patterns.seq_of_segs:match("home/../other"))
    end)
  end)

  describe("unix path patterns", function()
    describe("absolute_path", function()
      it("should match root directory", function()
        assert.equals(2, patterns.absolute_path:match("/"))
      end)

      it("should match absolute paths", function()
        assert.equals(6, patterns.absolute_path:match("/home"))
        assert.equals(11, patterns.absolute_path:match("/home/user"))
        assert.equals(22, patterns.absolute_path:match("/home/user/documents"))
      end)

      it("should match absolute paths with trailing slash", function()
        assert.equals(7, patterns.absolute_path:match("/home/"))
        assert.equals(12, patterns.absolute_path:match("/home/user/"))
      end)

      it("should not match relative paths", function()
        assert.is_nil(patterns.absolute_path:match("home"))
        assert.is_nil(patterns.absolute_path:match("home/user"))
      end)

      it("should handle special segments", function()
        assert.equals(4, patterns.absolute_path:match("/.."))
        assert.equals(3, patterns.absolute_path:match("/."))
        assert.equals(17, patterns.absolute_path:match("/home/../other"))
      end)
    end)

    describe("relative_path", function()
      it("should match relative paths", function()
        assert.equals(5, patterns.relative_path:match("home"))
        assert.equals(10, patterns.relative_path:match("home/user"))
        assert.equals(21, patterns.relative_path:match("home/user/documents"))
      end)

      it("should match current and parent directory", function()
        assert.equals(2, patterns.relative_path:match("."))
        assert.equals(3, patterns.relative_path:match(".."))
        assert.equals(11, patterns.relative_path:match("../parent"))
      end)

      it("should not match absolute paths", function()
        assert.is_nil(patterns.relative_path:match("/"))
        assert.is_nil(patterns.relative_path:match("/home"))
      end)
    end)

    describe("unix_path", function()
      it("should match both absolute and relative paths", function()
        -- Absolute
        assert.equals(2, patterns.unix_path:match("/"))
        assert.equals(6, patterns.unix_path:match("/home"))
        assert.equals(22, patterns.unix_path:match("/home/user/documents"))

        -- Relative
        assert.equals(5, patterns.unix_path:match("home"))
        assert.equals(10, patterns.unix_path:match("home/user"))
        assert.equals(2, patterns.unix_path:match("."))
        assert.equals(3, patterns.unix_path:match(".."))
      end)
    end)
  end)

  describe("memory address patterns", function()
    describe("addr", function()
      it("should match basic hex addresses", function()
        assert.equals(10, patterns.addr:match("0x1234567"))
        assert.equals(4, patterns.addr:match("0xab"))
        assert.equals(4, patterns.addr:match("0x00"))
        assert.equals(4, patterns.addr:match("0xff"))
      end)

      it("should match addresses with question mark", function()
        assert.equals(11, patterns.addr:match("0x1234567?"))
        assert.equals(5, patterns.addr:match("0xab?"))
        assert.equals(17, patterns.addr:match("0xc000281300?"))
      end)

      it("should require minimum 2 hex digits", function()
        assert.is_nil(patterns.addr:match("0x"))
        assert.is_nil(patterns.addr:match("0x1"))
      end)

      it("should not match without 0x prefix", function()
        assert.is_nil(patterns.addr:match("1234"))
        assert.is_nil(patterns.addr:match("abcd"))
      end)

      it("should not match invalid hex characters", function()
        assert.is_nil(patterns.addr:match("0xgg"))
        assert.is_nil(patterns.addr:match("0x12zz"))
      end)

      it("should match typical Go addresses", function()
        assert.equals(17, patterns.addr:match("0xc000281300?"))
        assert.equals(16, patterns.addr:match("0xc00011fd98?"))
        assert.equals(5, patterns.addr:match("0x13?"))
      end)
    end)

    describe("addr_offset", function()
      it("should match address offsets", function()
        assert.equals(11, patterns.addr_offset:match("+0x1234567"))
        assert.equals(5, patterns.addr_offset:match("+0xab"))
        assert.equals(12, patterns.addr_offset:match("+0x1234567?"))
      end)

      it("should require plus sign", function()
        assert.is_nil(patterns.addr_offset:match("0x1234"))
        assert.is_nil(patterns.addr_offset:match("-0x1234"))
      end)

      it("should follow same hex rules as addr", function()
        assert.is_nil(patterns.addr_offset:match("+0x"))
        assert.is_nil(patterns.addr_offset:match("+0x1"))
        assert.is_nil(patterns.addr_offset:match("+0xgg"))
      end)
    end)
  end)
end)
